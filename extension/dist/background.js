const i={BASE_URL:"https://magic-button-api-374140035541.europe-west1.run.app",ENDPOINTS:{HEALTH:"/health",PROCESS:"/api/genai/process",DEMO_STATUS:"/demo/status",RAG_DOCUMENTS:"/rag/documents",RAG_SEARCH:"/rag/search",RAG_GENERATE:"/rag/generate"},DEFAULT_HEADERS:{"Content-Type":"application/json"},TIMEOUT:3e4};console.log("Magic Button background script loaded");console.log("üöÄ API Configuration:",i.BASE_URL);chrome.runtime.onInstalled.addListener(o=>{console.log("Magic Button extension installed:",o.reason),o.reason==="install"&&chrome.storage.local.set({installDate:new Date().toISOString(),version:chrome.runtime.getManifest().version})});chrome.runtime.onMessage.addListener((o,n,e)=>{var t;switch(console.log("Background received message:",o),o.type){case"GET_SELECTED_TEXT":return E((t=n.tab)==null?void 0:t.id,e),!0;case"PROCESS_AI_REQUEST":case"PROCESS_TEXT":return p(o,e),!0;case"UPLOAD_DOCUMENT":return g(o,e),!0;case"RAG_SEARCH":return d(o,e),!0;case"OPEN_POPUP":return console.log("Popup open request:",o),e({success:!0}),!1;default:console.warn("Unknown message type:",o.type)}});async function E(o,n){var e;try{if(!o){n({error:"No active tab found"});return}const c=((e=(await chrome.scripting.executeScript({target:{tabId:o},func:()=>{var r;return((r=window.getSelection())==null?void 0:r.toString())||""}}))[0])==null?void 0:e.result)||"";n({selectedText:c})}catch(t){console.error("Error getting selected text:",t),n({error:t instanceof Error?t.message:"Unknown error"})}}const l=i.BASE_URL;async function p(o,n){try{const e=o.data||o,t=`${l}/api/genai/process`;console.log("üöÄ VERTEX AI - Making API request to:",t),console.log("Request data:",e),console.log("API_BASE_URL from config:",i.BASE_URL);const c={action:e.action,text:e.text,options:e.options||{}};console.log("Request body:",JSON.stringify(c,null,2));const r=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(c)});if(console.log("Response status:",r.status,r.statusText),console.log("Response headers:",Object.fromEntries(r.headers.entries())),!r.ok){const a=await r.text();throw console.error("API Error Response:",a),new Error(`API Error: ${r.status} ${r.statusText} - ${a}`)}const s=await r.json();console.log("‚úÖ API Response success:",s),n({success:!0,result:s.result||s.text||s,action:e.action,processingTime:s.processingTime})}catch(e){console.error("‚ùå Error processing AI request:",e),console.error("Error details:",{name:e instanceof Error?e.name:"Unknown",message:e instanceof Error?e.message:"Unknown error",stack:e instanceof Error?e.stack:void 0}),n({success:!1,error:e instanceof Error?e.message:"Unknown error",action:(o.data||o).action})}}async function g(o,n){var e;try{console.log("üìÑ Uploading document:",o.filename);const t=`${l}/rag/documents`,c={fileName:o.filename,content:o.content,mimeType:o.fileType||"text/plain"};console.log("Upload request body:",{fileName:o.filename,mimeType:o.fileType,contentLength:(e=o.content)==null?void 0:e.length});const r=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(c)});if(console.log("Upload response status:",r.status,r.statusText),!r.ok){const a=await r.text();throw console.error("Upload API Error Response:",a),new Error(`Upload API Error: ${r.status} ${r.statusText} - ${a}`)}const s=await r.json();console.log("‚úÖ Document upload success:",s),n({success:!0,result:s.message||"Document upload√© avec succ√®s",documentId:s.documentId})}catch(t){console.error("‚ùå Error uploading document:",t),n({success:!1,error:t instanceof Error?t.message:"Erreur lors de l'upload du document"})}}async function d(o,n){try{const e=new URLSearchParams({q:o.query,limit:(o.limit||5).toString()}),t=`${l}/rag/search?${e}`;console.log("üîç RAG Search - Making API request to:",t);const c=new AbortController,r=setTimeout(()=>c.abort(),8e3),s=await fetch(t,{method:"GET",headers:{"Content-Type":"application/json"},signal:c.signal});if(clearTimeout(r),console.log("RAG Search response status:",s.status,s.statusText),!s.ok){const u=await s.text();throw console.error("RAG Search API Error Response:",u),new Error(`RAG Search API Error: ${s.status} ${s.statusText} - ${u}`)}const a=await s.json();console.log("‚úÖ RAG Search success:",a),n({success:!0,results:a.results||[],message:a.message})}catch(e){console.error("‚ùå Error in RAG search:",e),e instanceof Error&&e.name==="AbortError"?n({success:!1,error:"Timeout - La recherche a pris trop de temps"}):n({success:!1,error:e instanceof Error?e.message:"Erreur lors de la recherche RAG"})}}
